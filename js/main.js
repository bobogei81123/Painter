// Generated by CoffeeScript 1.9.0
var ColorInput, Main, RangeInput, Tools, circleTool, main, paintTool, pencilTool, rectTool,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Main = (function() {
  function Main() {
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onMouseUp = __bind(this.onMouseUp, this);
    this.onMouseDown = __bind(this.onMouseDown, this);
    this.mouseStatus = 0;
    this.currentTool = -1;
    this.canvas = $('#main-canvas');
    this.bcanvas = $('#buf-canvas');
    this.detectDiv = $('#detect-div');
    this.ctx = this.canvas[0].getContext('2d');
    this.bctx = this.bcanvas[0].getContext('2d');
    this.tools = [];
    this.width = this.canvas.width();
    this.height = this.canvas.height();
    this.BufDis = 50;
  }

  Main.prototype.mouseDown = function() {
    return this.mouseStatus = 1;
  };

  Main.prototype.mouseUp = function() {
    return this.mouseStatus = 0;
  };

  Main.prototype.init = function() {
    var can, toolDiv;
    can = this.canvas[0];
    can.width = this.ctx.width = this.canvas.width();
    can.height = this.ctx.height = this.canvas.height();
    can.onselectstart = function() {
      return false;
    };
    can = this.bcanvas[0];
    can.width = this.bctx.width = this.bcanvas.width();
    can.height = this.bctx.height = this.bcanvas.height();
    can.onselectstart = function() {
      return false;
    };
    toolDiv = $('#toolbox-wrapper');
    this.tools.forEach(function(tool, idx) {
      var img, wrapDiv;
      img = $('<img>').attr('src', 'img/' + tool.iconImg).addClass('tool-img');
      wrapDiv = $('<div>').addClass('tool-icon').append(img).click(function() {
        return main.changeCurrentTool(idx);
      });
      return toolDiv.append(wrapDiv);
    });
    this.ctx.fillStyle = 'white';
    this.ctx.fillRect(0, 0, this.canvas.width(), this.canvas.height());
    this.bctx.clearAll = function() {
      return this.clearRect(0, 0, this.width, this.height);
    };
    this.detectDiv.mousedown(this.onMouseDown);
    this.detectDiv.mousemove(this.onMouseMove);
    return this.detectDiv.mouseup(this.onMouseUp);
  };

  Main.prototype.changeCurrentTool = function(idx) {
    var toolDiv, topDiv;
    if (idx === this.currentTool) {
      return;
    }
    toolDiv = $('#toolbox-wrapper');
    toolDiv.children().removeClass('active');
    toolDiv.children().eq(idx).addClass('active');
    topDiv = $('#top-wrapper');
    topDiv.empty();
    this.tools[idx].controlVals.forEach(function(ctr) {
      return ctr.render(topDiv);
    });
    return this.currentTool = idx;
  };

  Main.prototype.onMouseDown = function(e) {
    console.log("zz");
    this.mouseDown();
    console.log(this.currentTool);
    if (this.currentTool !== -1) {
      this.tools[this.currentTool].onMouseDown(e.offsetX - this.BufDis, e.offsetY - this.BufDis, this.ctx, this.bctx);
    }
  };

  Main.prototype.onMouseUp = function(e) {
    this.mouseUp();
    if (this.currentTool !== -1) {
      this.tools[this.currentTool].onMouseUp(e.offsetX - this.BufDis, e.offsetY - this.BufDis, this.ctx, this.bctx);
    }
  };

  Main.prototype.onMouseMove = function(e) {
    var x, y, _ref;
    _ref = [e.offsetX - this.BufDis, e.offsetY - this.BufDis], x = _ref[0], y = _ref[1];
    if (this.currentTool !== -1) {
      this.tools[this.currentTool].onMouseMove(x, y, this.ctx, this.bctx, this.mouseStatus);
    }
    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
      this.mouseUp();
    }
  };

  return Main;

})();

Tools = (function() {
  function Tools(o) {
    _.extend(this, o);
    return;
  }

  Tools.prototype.getVal = function(i) {
    return this.controlVals[i].val();
  };

  return Tools;

})();

ColorInput = (function() {
  function ColorInput(o) {
    _.extend(this, o);
    return;
  }

  ColorInput.prototype.render = function(par) {
    var colorInput, textSpan, wrapDiv;
    textSpan = $('<span> ' + this.text + ' </span>').addClass('option-text-span');
    colorInput = $('<input type="text" id="color1"/>');
    wrapDiv = $('<div>').addClass('option-wrapper');
    wrapDiv.append(textSpan).append(colorInput);
    par.append(wrapDiv);
    colorInput.spectrum({
      clickoutFiresChange: true,
      showPalette: true,
      palette: [["#000", "#444", "#666", "#999", "#ccc", "#eee", "#f3f3f3", "#fff"], ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"], ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"], ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"], ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"], ["#c00", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3d85c6", "#674ea7", "#a64d79"], ["#900", "#b45f06", "#bf9000", "#38761d", "#134f5c", "#0b5394", "#351c75", "#741b47"], ["#600", "#783f04", "#7f6000", "#274e13", "#0c343d", "#073763", "#20124d", "#4c1130"]],
      showAlpha: true
    });
    this.spec = colorInput;
  };

  ColorInput.prototype.val = function() {
    console.log(this.spec.spectrum('get').toRgbString());
    return this.spec.spectrum('get');
  };

  return ColorInput;

})();

RangeInput = (function() {
  function RangeInput(o) {
    _.extend(this, o);
    return;
  }

  RangeInput.prototype.render = function(par) {
    var rangeInput, textSpan, wrapDiv;
    textSpan = $('<span> ' + this.text + ' </span>').addClass('option-text-span');
    rangeInput = $('<input type="range" id="range2" min="0" max="100" value="3"/>');
    wrapDiv = $('<div>').addClass('option-wrapper');
    wrapDiv.append(textSpan).append(rangeInput);
    par.append(wrapDiv);
    this.inp = rangeInput;
  };

  RangeInput.prototype.val = function() {
    return this.inp.val();
  };

  return RangeInput;

})();

pencilTool = new Tools({
  controlVals: [
    new ColorInput({
      text: 'Draw color:'
    }), new RangeInput({
      text: 'Draw width:'
    })
  ],
  onMouseDown: function(x, y, ctx) {
    var color;
    color = this.controlVals[0].val();
    ctx.beginPath();
    ctx.strokeStyle = color.toRgbString();
    ctx.lineJoin = ctx.lineCap = 'round';
    ctx.lineWidth = this.controlVals[1].val();
    return ctx.moveTo(x, y);
  },
  onMouseMove: function(x, y, ctx, bctx, status) {
    console.log(status);
    if (status === 0) {
      return;
    }
    console.log(x, y);
    ctx.lineTo(x, y);
    return ctx.stroke();
  },
  onMouseUp: function(x, y, ctx, status) {},
  iconImg: 'pencil-icon.svg'
});

paintTool = new Tools({
  controlVals: [
    new ColorInput({
      text: 'Fill color:'
    })
  ],
  onMouseDown: function(x, y, ctx) {
    var color, colorVec, cur, dx, dy, getData, height, i, inRange, isEqual4, nx, ny, o, putData, qe, qs, quex, quey, qx, qy, rawData, width, _i, _ref;
    color = this.controlVals[0].val().toRgb();
    colorVec = [color.r, color.g, color.b, color.a * 255];
    rawData = ctx.getImageData(0, 0, ctx.width, ctx.height);
    width = ctx.width;
    height = ctx.height;
    getData = function(x, y) {
      var o;
      o = (y * width + x) * 4;
      return [rawData.data[o], rawData.data[o + 1], rawData.data[o + 2], rawData.data[o + 3]];
    };
    putData = function(x, y) {
      var o;
      o = (y * width + x) * 4;
      rawData.data[o] = color.r;
      rawData.data[o + 1] = color.g;
      rawData.data[o + 2] = color.b;
      return rawData.data[o + 3] = color.a * 255;
    };
    isEqual4 = function(l1, l2) {
      return (l1[0] === l2[0]) && (l1[1] === l2[1]) && (l1[2] === l2[2]) && (l1[3] === l2[3]);
    };
    if (isEqual4(colorVec, getData(x, y))) {
      return;
    }
    inRange = function(_x, _y) {
      return _x >= 0 && _x < width && _y >= 0 && _y < height;
    };
    cur = getData(x, y);
    quex = [x];
    quey = [y];
    _ref = [0, 1], qs = _ref[0], qe = _ref[1];
    dx = [1, 0, -1, 0];
    dy = [0, 1, 0, -1];
    putData(x, y);
    while (qs !== qe) {
      nx = quex[qs];
      ny = quey[qs];
      ++qs;
      for (i = _i = 0; _i <= 3; i = ++_i) {
        qx = nx + dx[i];
        qy = ny + dy[i];
        if (qx < 0 || qx >= width || qy < 0 || qy >= height) {
          continue;
        }
        o = (qy * width + qx) * 4;
        if (rawData.data[o] === cur[0] && rawData.data[o + 1] === cur[1] && rawData.data[o + 2] === cur[2] && rawData.data[o + 3] === cur[3]) {
          rawData.data[o] = colorVec[0];
          rawData.data[o + 1] = colorVec[1];
          rawData.data[o + 2] = colorVec[2];
          rawData.data[o + 3] = colorVec[3];
          quex.push(qx);
          quey.push(qy);
          ++qe;
        }
      }
    }
    return ctx.putImageData(rawData, 0, 0);
  },
  onMouseMove: function(x, y, ctx, bctx, status) {},
  onMouseUp: function(x, y, ctx) {},
  iconImg: 'paint-icon.png'
});

rectTool = new Tools({
  controlVals: [
    new ColorInput({
      text: 'Border color:'
    }), new ColorInput({
      text: 'Fill color:'
    }), new RangeInput({
      text: 'Border width:'
    })
  ],
  onMouseDown: function(x, y, ctx) {
    this.startx = x;
    return this.starty = y;
  },
  onMouseMove: function(x, y, ctx, bctx, st) {
    if (st === 0) {
      return;
    }
    this.endx = x;
    this.endy = y;
    bctx.clearRect(0, 0, bctx.width, bctx.height);
    bctx.beginPath();
    bctx.strokeStyle = this.getVal(0).toRgbString();
    bctx.fillStyle = this.getVal(1).toRgbString();
    bctx.lineWidth = this.getVal(2);
    bctx.rect(this.startx, this.starty, this.endx - this.startx, this.endy - this.starty);
    bctx.fill();
    return bctx.stroke();
  },
  onMouseUp: function(x, y, ctx, bctx) {
    ctx.beginPath();
    ctx.strokeStyle = this.controlVals[0].val().toRgbString();
    ctx.fillStyle = this.getVal(1).toRgbString();
    ctx.lineWidth = this.getVal(2);
    ctx.rect(this.startx, this.starty, this.endx - this.startx, this.endy - this.starty);
    ctx.fill();
    ctx.stroke();
    return bctx.clearRect(0, 0, bctx.width, bctx.height);
  },
  iconImg: 'rect-icon.png'
});

circleTool = new Tools({
  controlVals: [
    new ColorInput({
      text: 'Border color:'
    }), new ColorInput({
      text: 'Fill color:'
    }), new RangeInput({
      text: 'Border width:'
    })
  ],
  drawEllipse: function(x1, y1, x2, y2, ctx) {
    var centx, centy, lenx, leny, _ref, _ref1;
    if (x1 > x2) {
      _ref = [x2, x1], x1 = _ref[0], x2 = _ref[1];
    }
    if (y1 > y2) {
      _ref1 = [y2, y1], y1 = _ref1[0], y2 = _ref1[1];
    }
    centx = (x1 + x2) / 2;
    centy = (y1 + y2) / 2;
    lenx = (x2 - x1) / 2;
    leny = (y2 - y1) / 2;
    return [centx, centy, lenx, leny];
  },
  onMouseDown: function(x, y, ctx) {
    this.startx = x;
    return this.starty = y;
  },
  onMouseMove: function(x, y, ctx, bctx, st) {
    var res;
    if (st === 0) {
      return;
    }
    this.endx = x;
    this.endy = y;
    bctx.clearAll();
    bctx.clearRect(0, 0, bctx.width, bctx.height);
    bctx.beginPath();
    bctx.strokeStyle = this.controlVals[0].val().toRgbString();
    bctx.fillStyle = this.getVal(1).toRgbString();
    bctx.lineWidth = parseInt(this.getVal(2));
    res = this.drawEllipse(this.startx, this.starty, this.endx, this.endy, bctx);
    bctx.ellipse(res[0], res[1], res[2], res[3], 0, 0, 2 * Math.PI);
    bctx.fill();
    return bctx.stroke();
  },
  onMouseUp: function(x, y, ctx, bctx) {
    var res;
    bctx.clearAll();
    ctx.beginPath();
    ctx.strokeStyle = this.controlVals[0].val().toRgbString();
    ctx.fillStyle = this.getVal(1).toRgbString();
    ctx.lineWidth = parseInt(this.getVal(2));
    console.log(ctx.lineWidth, this.getVal(2));
    res = this.drawEllipse(this.startx, this.starty, this.endx, this.endy, ctx);
    ctx.ellipse(res[0], res[1], res[2], res[3], 0, 0, 2 * Math.PI);
    ctx.fill();
    ctx.stroke();
    console.log("fill");
    ctx.beginPath();
    this.drawEllipse(this.startx + 200, this.starty + 200, this.endx, this.endy, ctx);
    return ctx.stroke();
  },
  iconImg: 'circle-icon.png'
});

main = new Main();

main.tools = [pencilTool, paintTool, rectTool, circleTool];

main.init();
